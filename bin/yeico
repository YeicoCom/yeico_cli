#!/bin/bash -e

SCRIPT_PATH=$(dirname $BASH_SOURCE)
SCRIPT_PATH=$(realpath $SCRIPT_PATH)

panic() { 
    >&2 echo Panic: $1
    exit 1
}

help() {
    this=$(basename $0)
    echo "Usage: $this action ...args"
    echo "$this help"
    echo "$this update"
    echo "$this list host"
    echo "$this setup host"
    echo "$this show host url|splash"
    echo "$this build path-to-project|current-directory"
    echo "$this install host path-to-project|current-directory"
    echo "$this start|stop|restart|uninstall|pid|shell host app-name|path-to-project|current-directory"
    exit 1
}

export MIX_ENV=prod

ACTION=$1

case $ACTION in
    update)
    APP_LEVEL=0
    echo Action: $ACTION
    ;;
    list|setup|show)
    APP_LEVEL=0
    APP_HOST=$2
    SHOW_URL=$3
    [ -n "$APP_HOST" ] || panic "Missing host argument"
    echo Action: $ACTION
    echo Target: $APP_HOST
    ;;
    build)
    APP_LEVEL=2 #full application
    APP_PATH=${2:-$(pwd)}
    echo Action: $ACTION
    ;;
    install|deploy)
    APP_LEVEL=2 #full application
    APP_HOST=$2
    APP_PATH=${3:-$(pwd)}
    [ -n "$APP_HOST" ] || panic "Missing host argument"
    echo Action: $ACTION
    ;;
    start|stop|restart|uninstall|pid|shell)
    APP_LEVEL=1 #name of application
    APP_HOST=$2
    APP_NAME=$3
    [ -n "$APP_HOST" ] || panic "Missing host argument"
    echo Action: $ACTION
    echo Target: $APP_HOST
    ;;
    *)
    help
    ;;
esac

last_line() {
    # [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki 
    # for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` 
    # or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
    # [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
    # You don't need to worry! This is an optional feature used during development to
    # refresh your browser when you save files and it does not affect production.
    sed -n '$p' -
}

if [ $APP_LEVEL == 1 ]; then
    APP_PATH=${APP_NAME:-.}
    if [ -f "${APP_PATH}/mix.exs" ]; then
        APP_LEVEL=2
    else
        [ -n "$APP_NAME" ] || panic "Missing app name"
        [[ "$APP_NAME" =~ ^[0-9a-zA-Z_\-]+$ ]] || panic "Invalid app name"
        echo App Name: $APP_NAME
    fi
fi

if [ $APP_LEVEL == 2 ]; then
    cd $APP_PATH
    APP_PATH=$(pwd)
    echo App Path: $APP_PATH
    [ -f mix.exs ] || panic "Missing mix.exs"
    # projects with no deps have no deps folder and will run deps.get every time
    # mix deps.get is verbose and will be run only once
    # manually running the dev mix deps.get after adding deps is a reasonable compromise
    [ -d deps ] || (mix deps.get  || panic "Deps get failure")
    (mix compile  || panic "Compilation failure")
    export SECRET_KEY_BASE=XVd7MRJNyiiG4OyxQPw5SbrxbQDPZs7cC6blTKbe6Y7Kw8HE6NPOF/m+ZjKAeuNj
    # --no-start required for cross compilation
    APP_NAME=$(mix run --no-start --eval "Mix.Project.config()[:app] |> to_string() |> IO.puts()" | last_line)
    echo App Name: $APP_NAME
    APP_VERSION=$(mix run --no-start --eval "Mix.Project.config()[:version] |> IO.puts()" | last_line)
    echo App Version: $APP_VERSION
    APP_PHOENIX=$(mix run --no-start --eval "Mix.Project.config()[:deps] |> Keyword.get(:phoenix) |> IO.inspect()" | last_line)
    APP_PHOENIX=$(test "$APP_PHOENIX" == "nil" && echo false || echo true)
    echo App Phoenix: $APP_PHOENIX
    RSYNC_CONF=/tmp/.rsyncd.conf.$APP_NAME
    APP_RELDIR=_build/prod/rel/$APP_NAME
fi

build_app () {
    if [[ $APP_PHOENIX == true ]]; then
        (mix phx.gen.release || panic "Phx release failure")
        [ -d assets ] && (mix phx.digest.clean --all || panic "Assets digest clean failure")
        [ -d assets ] && (mix assets.deploy || panic "Assets deploy failure")
    fi
    mix release --overwrite --quiet || panic "Release failure"
    echo YEICO_CLI_APP_NAME=$APP_NAME > $APP_RELDIR/release.yeico
    echo YEICO_CLI_APP_VERSION=$APP_VERSION >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_APP_PHOENIX=$APP_PHOENIX >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_ASDF=$(asdf version) >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_BUILD=$(date +'%Y%m%dT%H%M%S.%3N') >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_HOSTNAME=$(hostname) >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_GIT_ORIGIN=$(git config --get remote.origin.url) >> $APP_RELDIR/release.yeico
    #HEAD requires an initial commit, bypass with:
    #git commit --allow-empty -n -m "Initial commit."
    echo YEICO_CLI_GIT_COMMIT=$(git rev-parse HEAD) >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) >> $APP_RELDIR/release.yeico
    echo \#$(asdf current erlang) >> $APP_RELDIR/release.yeico
    echo \#$(asdf current elixir) >> $APP_RELDIR/release.yeico

    ln -sf releases/$APP_VERSION/env.sh $APP_RELDIR/env.sh
    [ -f $APP_PATH/.iex.exs ] && cp -f $APP_PATH/.iex.exs $APP_RELDIR/
    # epmd automatically launched by the app start scripts
    echo export ERL_EPMD_ADDRESS=127.0.0.1 >> $APP_RELDIR/env.sh
    echo export RELEASE_NODE=$APP_NAME@localhost >> $APP_RELDIR/env.sh
    echo '[ -f /run/yeico.cookie ] && export RELEASE_COOKIE=$(cat /run/yeico.cookie)' >> $APP_RELDIR/env.sh
    echo export HOME=/data/$APP_NAME >> $APP_RELDIR/env.sh
    echo export LC_ALL=en_US.UTF-8 >> $APP_RELDIR/env.sh
    if [[ $APP_PHOENIX == true ]]; then
        touch $APP_RELDIR/phoenix
        APP_SECRET=$(mix phx.gen.secret | last_line)
        echo export PHX_SERVER=true >> $APP_RELDIR/env.sh
        echo export SECRET_KEY_BASE=$APP_SECRET >> $APP_RELDIR/env.sh
    fi
    echo "[ -f /data/$APP_NAME.env ] && . /data/$APP_NAME.env || true" >> $APP_RELDIR/env.sh
    echo $APP_PATH/$APP_RELDIR/bin/$APP_NAME start
}

rsync_clean() {
    rm -f $RSYNC_CONF 2>/dev/null
    RSYNC_PID=$(pgrep -f 'rsync --daemon' || echo 0)
    [ $RSYNC_PID != 0 ] && sudo kill -9 $RSYNC_PID 2>/dev/null || true
}

rsync_app() {
    rsync_clean
    trap "rsync_clean" EXIT
    [ -d $APP_RELDIR ] || panic "Release folder not found"
    [ -f $APP_RELDIR/release.yeico ] || panic "Release file not found: build required."
    RSYNC_PATH=$(realpath $APP_RELDIR)
    echo "[$APP_NAME]" > $RSYNC_CONF
    echo "path=$RSYNC_PATH" >> $RSYNC_CONF
    sudo rsync --daemon --config=$RSYNC_CONF
    echo apps.sh $1 $APP_NAME | ssh -T root@$APP_HOST -R 873:127.0.0.1:873
}

command_app() {
    echo apps.sh $1 $APP_NAME | ssh -T root@$APP_HOST
}

command_show() {
    echo cog.sh $1 | ssh -T root@$APP_HOST
}

case $ACTION in
    update)
    asdf uninstall yeico_cli main
    asdf install yeico_cli main
    ;;
    list)
    command_app list
    ;;
    setup)
    scp $SCRIPT_PATH/apps.sh root@$APP_HOST:/usr/sbin/
    scp $SCRIPT_PATH/apps root@$APP_HOST:/etc/init.d/
    scp $SCRIPT_PATH/apps.service root@$APP_HOST:/etc/systemd/system/
    command_app setup
    ;;
    show)
    command_show $SHOW_URL
    ;;
    build)
    build_app
    ;;
    install)
    rsync_app install
    ;;
    deploy)
    build_app
    rsync_app install
    ;;
    start)
    command_app start
    ;;
    stop)
    command_app stop
    ;;
    restart)
    command_app restart
    ;;
    uninstall)
    command_app uninstall
    ;;
    pid)
    command_app pid
    ;;
    shell)
    # test tty with: ssh -t root@kiosk htop
    # ps -ww | grep beam.smp | grep start_iex
    # pgrep -f start_iex || echo $?
    # kill $(pgrep -f start_iex)
    ssh -t root@$APP_HOST apps.sh shell $APP_NAME
    ;;
    *)
    panic "Invalid action"
    ;;
esac
