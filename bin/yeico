#!/bin/bash -e

SCRIPT_PATH=$(dirname $BASH_SOURCE)
SCRIPT_PATH=$(realpath $SCRIPT_PATH)

ACTION=$1
APP_HOST=$2
APP_PATH=${3:-$(pwd)}
COG_URL=$3

case $ACTION in
    build)
    APP_REQUIRED=1
    echo Action: $ACTION
    echo App Folder: $APP_PATH
    ;;
    list|cog)
    APP_REQUIRED=0
    echo Action: $ACTION
    echo Target: $APP_HOST
    ;;
    *)
    APP_REQUIRED=1
    echo Action: $ACTION
    echo Target: $APP_HOST
    echo App Folder: $APP_PATH
    ;;
esac

panic() { 
    >&2 echo $1
    exit 1
}

last_line() {
    # [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki 
    # for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` 
    # or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
    # [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
    # You don't need to worry! This is an optional feature used during development to
    # refresh your browser when you save files and it does not affect production.
    sed -n '$p' -
}

if [ $APP_REQUIRED == 1 ]; then
    cd $APP_PATH
    APP_PATH=$(pwd)
    echo App Path: $APP_PATH
    [ -f mix.exs ] || panic "Missing mix.exs"
    [ -d deps ] || (MIX_ENV=prod mix deps.get  || panic "Deps get failure")
    (MIX_ENV=prod mix compile  || panic "Compilation failure")
    APP_NAME=$(mix run --eval "Mix.Project.config()[:app] |> to_string() |> IO.puts()" | last_line)
    echo App Name: $APP_NAME
    APP_VERSION=$(mix run --eval "Mix.Project.config()[:version] |> IO.puts()" | last_line)
    echo App Version: $APP_VERSION
    APP_PHOENIX=$(mix run --eval "Mix.Project.config()[:deps] |> Keyword.get(:phoenix) |> IO.inspect()" | last_line)
    APP_PHOENIX=$(test "$APP_PHOENIX" == "nil" && echo false || echo true)
    echo App Phoenix: $APP_PHOENIX
    RSYNC_CONF=/tmp/.rsyncd.conf.$APP_NAME
    APP_RELDIR=_build/prod/rel/$APP_NAME
fi

build_app () {
    if [[ $APP_PHOENIX == true ]]; then
        (MIX_ENV=prod mix phx.gen.release || panic "Phx release failure")
        [ -d assets ] && (MIX_ENV=prod mix assets.deploy || panic "Assets deploy failure")
    fi    
    MIX_ENV=prod mix release --overwrite --quiet || panic "Release failure"
    echo YEICO_CLI_APP_NAME=$APP_NAME > $APP_RELDIR/release.yeico
    echo YEICO_CLI_APP_VERSION=$APP_VERSION >> $APP_RELDIR/release.yeico
    echo YEICO_CLI_APP_PHOENIX=$APP_PHOENIX >> $APP_RELDIR/release.yeico
    ln -s releases/$APP_VERSION/env.sh $APP_RELDIR/env.sh
    echo export RELEASE_NODE=$APP_NAME@localhost >> $APP_RELDIR/env.sh
    echo export HOME=/data/$APP_NAME >> $APP_RELDIR/env.sh
    if [[ $APP_PHOENIX == true ]]; then
        touch $APP_RELDIR/phoenix
        APP_SECRET=$(mix phx.gen.secret | last_line)
        echo export PHX_SERVER=true >> $APP_RELDIR/env.sh
        echo export SECRET_KEY_BASE=$APP_SECRET >> $APP_RELDIR/env.sh
        echo $APP_PATH/$APP_RELDIR/bin/$APP_NAME start
    else
        echo $APP_PATH/$APP_RELDIR/bin/$APP_NAME start
    fi
}

rsync_clean() {
    rm -f $RSYNC_CONF 2>/dev/null
    RSYNC_PID=$(pgrep -f 'rsync --daemon' || echo 0)
    [ $RSYNC_PID != 0 ] && sudo kill -9 $RSYNC_PID 2>/dev/null || true
}

rsync_app() {
    rsync_clean
    trap "rsync_clean" EXIT
    [ -d $APP_RELDIR ] || panic "Release folder not found"
    [ -f $APP_RELDIR/release.yeico ] || panic "Release file not found: build required."
    RSYNC_PATH=$(realpath $APP_RELDIR)
    echo "[$APP_NAME]" > $RSYNC_CONF
    echo "path=$RSYNC_PATH" >> $RSYNC_CONF
    sudo rsync --daemon --config=$RSYNC_CONF
    echo apps.sh $1 $APP_NAME | ssh -T root@$APP_HOST -R 873:127.0.0.1:873
}

command_app() {
    echo apps.sh $1 $APP_NAME | ssh -T root@$APP_HOST
}

command_cog() {
    echo cog.sh $1 | ssh -T root@$APP_HOST
}

case $ACTION in
    build)
    build_app
    ;;
    start)
    command_app start
    ;;
    stop)
    command_app stop
    ;;
    restart)
    command_app restart
    ;;
    install)
    rsync_app install
    ;;
    uninstall)
    command_app uninstall
    ;;
    upgrade)
    rsync_app upgrade
    ;;
    list)
    command_app list
    ;;
    pid)
    command_app pid
    ;;
    cog)
    command_cog $COG_URL
    ;;
    *)
    echo "Usage: $0 {build|start|stop|restart|install|uninstall|upgrade|list|pid|cog}"
    exit 1
    ;;
esac
